<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust-analyzer</title>
    <description>rust-analyzer: building a better Rust IDE</description>
    <link>https://rust-analyzer.github.io//</link>
    <atom:link href="https://rust-analyzer.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 21 Feb 2022 04:38:14 +0000</pubDate>
    <lastBuildDate>Mon, 21 Feb 2022 04:38:14 +0000</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>Changelog #117</title>
        <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2022/02/21/changelog-117.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2022/02/21/changelog-117.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/d6ed146a1caa41c65a831efbc80d79067c8f5955&quot;&gt;&lt;code&gt;d6ed146&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2022-02-21&quot;&gt;&lt;code&gt;2022-02-21&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Become a sponsor:&lt;/strong&gt; On &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;OpenCollective&lt;/a&gt; or
&lt;a href=&quot;https://github.com/sponsors/rust-analyzer&quot;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11369&quot;&gt;&lt;code&gt;#11369&lt;/code&gt;&lt;/a&gt; (first contribution) add type hints for keyword expression hovers:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39541871/151611737-12325c23-a1f9-4fca-ae48-279b374bdcdf.png&quot; alt=&quot;151611737 12325c23 a1f9 4fca ae48 279b374bdcdf&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11484&quot;&gt;&lt;code&gt;#11484&lt;/code&gt;&lt;/a&gt; infer array size for slice patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11458&quot;&gt;&lt;code&gt;#11458&lt;/code&gt;&lt;/a&gt; (first contribution) parse immovable generator syntax (&lt;code&gt;static ||&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11477&quot;&gt;&lt;code&gt;#11477&lt;/code&gt;&lt;/a&gt; fix &lt;code&gt;Merge Imports&lt;/code&gt; dropping imports.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11480&quot;&gt;&lt;code&gt;#11480&lt;/code&gt;&lt;/a&gt; fix keyword hover on macro-expanded tokens.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11470&quot;&gt;&lt;code&gt;#11470&lt;/code&gt;&lt;/a&gt; (first contribution) fix typo in &lt;code&gt;GlobalState&lt;/code&gt; docs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11475&quot;&gt;&lt;code&gt;#11475&lt;/code&gt;&lt;/a&gt; avoid temporary &lt;code&gt;Vec&lt;/code&gt; in MBE.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11511&quot;&gt;&lt;code&gt;#11511&lt;/code&gt;&lt;/a&gt; wrap &lt;code&gt;MacroCallKind::Attr&lt;/code&gt; &lt;code&gt;attr_args&lt;/code&gt; field in an &lt;code&gt;Arc&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11512&quot;&gt;&lt;code&gt;#11512&lt;/code&gt;&lt;/a&gt; remove &lt;code&gt;name&lt;/code&gt; fields from &lt;code&gt;MacroCallKind&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #116</title>
        <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2022/02/14/changelog-116.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2022/02/14/changelog-116.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/02904e99acc3daf39b56ed18aa07e62aeb9492c5&quot;&gt;&lt;code&gt;02904e9&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2022-02-14&quot;&gt;&lt;code&gt;2022-02-14&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Become a sponsor:&lt;/strong&gt; On &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;OpenCollective&lt;/a&gt; or
&lt;a href=&quot;https://github.com/sponsors/rust-analyzer&quot;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11444&quot;&gt;&lt;code&gt;#11444&lt;/code&gt;&lt;/a&gt; fix up syntax errors in attribute macro inputs to make completion work more often:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/906069/153276465-81f780ed-8cc1-44ff-88a7-9080ce58116a.gif&quot; alt=&quot;153276465 81f780ed 8cc1 44ff 88a7 9080ce58116a&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11437&quot;&gt;&lt;code&gt;#11437&lt;/code&gt;&lt;/a&gt; render whether a function is &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;const&lt;/code&gt; / &lt;code&gt;unsafe&lt;/code&gt; in completion details:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/5489149/153089518-5419afe4-b2c6-4be8-80f7-585f5c514ff2.png&quot; alt=&quot;153089518 5419afe4 b2c6 4be8 80f7 585f5c514ff2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11459&quot;&gt;&lt;code&gt;#11459&lt;/code&gt;&lt;/a&gt; (first contribution) add missing experimental capabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11442&quot;&gt;&lt;code&gt;#11442&lt;/code&gt;&lt;/a&gt; (first contribution) use text range of a mod name after macro expansion when renaming a module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11436&quot;&gt;&lt;code&gt;#11436&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t change references to &lt;code&gt;super&lt;/code&gt; when renaming a module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11460&quot;&gt;&lt;code&gt;#11460&lt;/code&gt;&lt;/a&gt; fix documentation of &lt;code&gt;SsrParams&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11453&quot;&gt;&lt;code&gt;#11453&lt;/code&gt;&lt;/a&gt; make &lt;code&gt;ascend_call_token&lt;/code&gt; iterative instead of recursive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11427&quot;&gt;&lt;code&gt;#11427&lt;/code&gt;&lt;/a&gt; fix serialization of &lt;code&gt;WorkspaceSymbolParams&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #115</title>
        <pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2022/02/07/changelog-115.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2022/02/07/changelog-115.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/ba330548023607717295f0dfd61b72eda41aa9dd&quot;&gt;&lt;code&gt;ba33054&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2022-02-07&quot;&gt;&lt;code&gt;2022-02-07&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Become a sponsor:&lt;/strong&gt; On &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;OpenCollective&lt;/a&gt; or
&lt;a href=&quot;https://github.com/sponsors/rust-analyzer&quot;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11384&quot;&gt;&lt;code&gt;#11384&lt;/code&gt;&lt;/a&gt; complete local function and closure parameters from surrounding scopes:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/3757771/152641087-78f8e4c4-275c-4259-a17e-9fe2cc698269.gif&quot; alt=&quot;152641087 78f8e4c4 275c 4259 a17e 9fe2cc698269&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11401&quot;&gt;&lt;code&gt;#11401&lt;/code&gt;&lt;/a&gt; add ABI string completions:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/3757771/152686208-4546f830-e6bd-47f0-ae48-4bb48b499a73.png&quot; alt=&quot;152686208 4546f830 e6bd 47f0 ae48 4bb48b499a73&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11293&quot;&gt;&lt;code&gt;#11293&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11395&quot;&gt;&lt;code&gt;#11395&lt;/code&gt;&lt;/a&gt; implement format string completion:&lt;/p&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;https://user-images.githubusercontent.com/308347/152745371-f6b9a801-ddf1-41ae-afc1-c148f7bfddef.mp4&quot; controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11393&quot;&gt;&lt;code&gt;#11393&lt;/code&gt;&lt;/a&gt; complete functions and methods from block level impls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11394&quot;&gt;&lt;code&gt;#11394&lt;/code&gt;&lt;/a&gt; de-prioritize completions of private but editable definitions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11182&quot;&gt;&lt;code&gt;#11182&lt;/code&gt;&lt;/a&gt; (first contribution) don&amp;#8217;t panic on seeing an unexpected offset.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11412&quot;&gt;&lt;code&gt;#11412&lt;/code&gt;&lt;/a&gt; (first contribution) include &lt;code&gt;fn&lt;/code&gt;/&lt;code&gt;type&lt;/code&gt;/&lt;code&gt;const&lt;/code&gt; keyword in trait impl completion item source ranges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11388&quot;&gt;&lt;code&gt;#11388&lt;/code&gt;&lt;/a&gt; fix proc-macro server not using the supplied span in &lt;code&gt;Ident::new&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/3757771/151827812-c03b8fc7-7ecf-4959-804a-2680d8e61e8b.png&quot; alt=&quot;151827812 c03b8fc7 7ecf 4959 804a 2680d8e61e8b&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11390&quot;&gt;&lt;code&gt;#11390&lt;/code&gt;&lt;/a&gt; de-prioritize completions of qualified operator function completions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11322&quot;&gt;&lt;code&gt;#11322&lt;/code&gt;&lt;/a&gt; include comments in &quot;Extract function&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11399&quot;&gt;&lt;code&gt;#11399&lt;/code&gt;&lt;/a&gt; fix associated type shorthand from method bounds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11402&quot;&gt;&lt;code&gt;#11402&lt;/code&gt;&lt;/a&gt; fix visibility restriction path completions always using the parent module.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11416&quot;&gt;&lt;code&gt;#11416&lt;/code&gt;&lt;/a&gt; (first contribution) fix &lt;code&gt;eslint&lt;/code&gt; LSP config.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11418&quot;&gt;&lt;code&gt;#11418&lt;/code&gt;&lt;/a&gt; (first contribution) bump &lt;code&gt;pulldown-cmark-to-cmark&lt;/code&gt; to fix link rendering bug.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11291&quot;&gt;&lt;code&gt;#11291&lt;/code&gt;&lt;/a&gt; make range up-mapping more precise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11397&quot;&gt;&lt;code&gt;#11397&lt;/code&gt;&lt;/a&gt; refactor completion module split.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11403&quot;&gt;&lt;code&gt;#11403&lt;/code&gt;&lt;/a&gt; shrink &lt;code&gt;mbe::ExpandError&lt;/code&gt; and &lt;code&gt;mbe::ParseError&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11406&quot;&gt;&lt;code&gt;#11406&lt;/code&gt;&lt;/a&gt; update install notes for bundled servers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #114</title>
        <pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2022/01/31/changelog-114.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2022/01/31/changelog-114.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0&quot;&gt;&lt;code&gt;fd3942e&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2022-01-31&quot;&gt;&lt;code&gt;2022-01-31&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Become a sponsor:&lt;/strong&gt; On &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;OpenCollective&lt;/a&gt; or
&lt;a href=&quot;https://github.com/sponsors/rust-analyzer&quot;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11360&quot;&gt;&lt;code&gt;#11360&lt;/code&gt;&lt;/a&gt; add support for the &lt;code&gt;#![recursion_limit]&lt;/code&gt; attribute.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11281&quot;&gt;&lt;code&gt;#11281&lt;/code&gt;&lt;/a&gt; implement parallel cache priming.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11288&quot;&gt;&lt;code&gt;#11288&lt;/code&gt;&lt;/a&gt; (first contribution) enable &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; blocks in hover.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11347&quot;&gt;&lt;code&gt;#11347&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11354&quot;&gt;&lt;code&gt;#11354&lt;/code&gt;&lt;/a&gt; fix resolution of eager macro contents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11382&quot;&gt;&lt;code&gt;#11382&lt;/code&gt;&lt;/a&gt; fix IDE panics caused by &lt;code&gt;#[cfg_attr]&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11340&quot;&gt;&lt;code&gt;#11340&lt;/code&gt;&lt;/a&gt; make syntax bridge fully infallible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11353&quot;&gt;&lt;code&gt;#11353&lt;/code&gt;&lt;/a&gt; set current working directory for procedural macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11356&quot;&gt;&lt;code&gt;#11356&lt;/code&gt;&lt;/a&gt; roll back env vars changed by a proc macro.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11365&quot;&gt;&lt;code&gt;#11365&lt;/code&gt;&lt;/a&gt; allow &lt;code&gt;proc_macro_srv&lt;/code&gt; users to disable copying of compiled macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11348&quot;&gt;&lt;code&gt;#11348&lt;/code&gt;&lt;/a&gt; fix merge commit check for git 2.35.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #113</title>
        <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2022/01/24/changelog-113.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2022/01/24/changelog-113.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/17afa2e7780f399df99bec802c4ab7d2f920f158&quot;&gt;&lt;code&gt;17afa2e&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2022-01-24&quot;&gt;&lt;code&gt;2022-01-24&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Become a sponsor:&lt;/strong&gt; On &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;OpenCollective&lt;/a&gt; or
&lt;a href=&quot;https://github.com/sponsors/rust-analyzer&quot;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11310&quot;&gt;&lt;code&gt;#11310&lt;/code&gt;&lt;/a&gt; (first contribution) remove pipe from &lt;code&gt;surroundingPairs&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11311&quot;&gt;&lt;code&gt;#11311&lt;/code&gt;&lt;/a&gt; insert auto-imports after header comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11307&quot;&gt;&lt;code&gt;#11307&lt;/code&gt;&lt;/a&gt; allow macros to expand to or-patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11314&quot;&gt;&lt;code&gt;#11314&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t load auxiliary crates outside the workspace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11334&quot;&gt;&lt;code&gt;#11334&lt;/code&gt;&lt;/a&gt; avoid panic in &lt;code&gt;semantics&lt;/code&gt; due to &lt;code&gt;cfg_attr&lt;/code&gt; disrupting offsets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11327&quot;&gt;&lt;code&gt;#11327&lt;/code&gt;&lt;/a&gt; remove redundant &lt;code&gt;Option&lt;/code&gt; from eager macro expansions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11308&quot;&gt;&lt;code&gt;#11308&lt;/code&gt;&lt;/a&gt; status: output all crates a file belongs to.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #112</title>
        <pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2022/01/17/changelog-112.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2022/01/17/changelog-112.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/e6e72809e3b55da3a57af95e6445a12729331ad6&quot;&gt;&lt;code&gt;e6e7280&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2022-01-17&quot;&gt;&lt;code&gt;2022-01-17&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Become a sponsor:&lt;/strong&gt; On &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;OpenCollective&lt;/a&gt; or
&lt;a href=&quot;https://github.com/sponsors/rust-analyzer&quot;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11258&quot;&gt;&lt;code&gt;#11258&lt;/code&gt;&lt;/a&gt; (first contribution) Kate uses rust-analyzer by default now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11210&quot;&gt;&lt;code&gt;#11210&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11292&quot;&gt;&lt;code&gt;#11292&lt;/code&gt;&lt;/a&gt; deprioritize ops and comparison methods in completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11248&quot;&gt;&lt;code&gt;#11248&lt;/code&gt;&lt;/a&gt; take arm types into consideration in &lt;code&gt;Merge match arms assist&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11247&quot;&gt;&lt;code&gt;#11247&lt;/code&gt;&lt;/a&gt; print a single ellipsis for any number of omitted types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11257&quot;&gt;&lt;code&gt;#11257&lt;/code&gt;&lt;/a&gt; report missing macro diagnostics in item bodies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11259&quot;&gt;&lt;code&gt;#11259&lt;/code&gt;&lt;/a&gt; fix &lt;code&gt;use super::{super::&amp;#8230;&amp;#8203;};&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11261&quot;&gt;&lt;code&gt;#11261&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t complete attributes with existing expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11263&quot;&gt;&lt;code&gt;#11263&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t drop param completions when fully typing out a pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11265&quot;&gt;&lt;code&gt;#11265&lt;/code&gt;&lt;/a&gt; fix postfix completion panic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11282&quot;&gt;&lt;code&gt;#11282&lt;/code&gt;&lt;/a&gt; properly cache files in &lt;code&gt;Semantics&lt;/code&gt; when ascending macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11283&quot;&gt;&lt;code&gt;#11283&lt;/code&gt;&lt;/a&gt; adjust auto-indentation when typing &lt;code&gt;.&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11287&quot;&gt;&lt;code&gt;#11287&lt;/code&gt;&lt;/a&gt; quiet down &quot;overly long loop turn&quot; messages during project load.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11266&quot;&gt;&lt;code&gt;#11266&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11267&quot;&gt;&lt;code&gt;#11267&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11274&quot;&gt;&lt;code&gt;#11274&lt;/code&gt;&lt;/a&gt; restore &lt;code&gt;hir&lt;/code&gt; API boundary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11284&quot;&gt;&lt;code&gt;#11284&lt;/code&gt;&lt;/a&gt; remove redundant recursion limit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11276&quot;&gt;&lt;code&gt;#11276&lt;/code&gt;&lt;/a&gt; clean up &lt;code&gt;HasFormatSpecifier::lex_format_specifier&lt;/code&gt; slightly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11286&quot;&gt;&lt;code&gt;#11286&lt;/code&gt;&lt;/a&gt; clean up associated item collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11294&quot;&gt;&lt;code&gt;#11294&lt;/code&gt;&lt;/a&gt; move format specifier lexing from &lt;code&gt;syntax&lt;/code&gt; to &lt;code&gt;ide_db&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #111</title>
        <pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2022/01/10/changelog-111.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2022/01/10/changelog-111.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/0f8c96c92689af8378dbe9f466c6bf15a3a27458&quot;&gt;&lt;code&gt;0f8c96c&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2022-01-10&quot;&gt;&lt;code&gt;2022-01-10&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Become a sponsor:&lt;/strong&gt; On &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;OpenCollective&lt;/a&gt; or
&lt;a href=&quot;https://github.com/sponsors/rust-analyzer&quot;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11112&quot;&gt;&lt;code&gt;#11112&lt;/code&gt;&lt;/a&gt; evaluate constants in array repeat expression:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/308347/148725908-da1a03de-83dd-4e4e-afd1-b3ae326e298b.png&quot; alt=&quot;148725908 da1a03de 83dd 4e4e afd1 b3ae326e298b&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11193&quot;&gt;&lt;code&gt;#11193&lt;/code&gt;&lt;/a&gt; add setting to replace specific proc-macros with dummy expanders:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/3757771/148529907-12f2442d-627a-4484-8e16-aa903a249bc8.gif&quot; alt=&quot;148529907 12f2442d 627a 4484 8e16 aa903a249bc8&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11208&quot;&gt;&lt;code&gt;#11208&lt;/code&gt;&lt;/a&gt; expand attribute macros on impl and trait items.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11214&quot;&gt;&lt;code&gt;#11214&lt;/code&gt;&lt;/a&gt; poke user when supplying faulty configurations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11145&quot;&gt;&lt;code&gt;#11145&lt;/code&gt;&lt;/a&gt; add setting to use reasonable default expressions when filling missing fields.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11107&quot;&gt;&lt;code&gt;#11107&lt;/code&gt;&lt;/a&gt; (first contribution) fix generic type substitution when implementing trait with associated type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11061&quot;&gt;&lt;code&gt;#11061&lt;/code&gt;&lt;/a&gt; support &lt;code&gt;Move if to guard&lt;/code&gt; on &lt;code&gt;if&lt;/code&gt;-&lt;code&gt;else&lt;/code&gt; chains.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11178&quot;&gt;&lt;code&gt;#11178&lt;/code&gt;&lt;/a&gt; keep block modifiers in &lt;code&gt;Replace match with if let&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11184&quot;&gt;&lt;code&gt;#11184&lt;/code&gt;&lt;/a&gt; pass through mutable parameter references when extracting a function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11195&quot;&gt;&lt;code&gt;#11195&lt;/code&gt;&lt;/a&gt; pass through reference modifiers when extracting a variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11190&quot;&gt;&lt;code&gt;#11190&lt;/code&gt;&lt;/a&gt; improve function parameter completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11200&quot;&gt;&lt;code&gt;#11200&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11207&quot;&gt;&lt;code&gt;#11207&lt;/code&gt;&lt;/a&gt; always put a space after &lt;code&gt;dyn&lt;/code&gt; and &lt;code&gt;impl&lt;/code&gt; in macro pretty-printing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11201&quot;&gt;&lt;code&gt;#11201&lt;/code&gt;&lt;/a&gt; fix completions not considering ancestor items for attribute search.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11202&quot;&gt;&lt;code&gt;#11202&lt;/code&gt;&lt;/a&gt; fix hang in &lt;code&gt;apply_demorgan&lt;/code&gt; assist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11204&quot;&gt;&lt;code&gt;#11204&lt;/code&gt;&lt;/a&gt; shorten replacement path in &lt;code&gt;replace_qualified_name_with_use&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11211&quot;&gt;&lt;code&gt;#11211&lt;/code&gt;&lt;/a&gt; fix parsing of &lt;code&gt;#[derive]&lt;/code&gt; paths.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11218&quot;&gt;&lt;code&gt;#11218&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t insert &lt;code&gt;&amp;amp;mut&lt;/code&gt; twice in parameter completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11194&quot;&gt;&lt;code&gt;#11194&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t include lifetime when generating documentation for &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11220&quot;&gt;&lt;code&gt;#11220&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t include lifetime arguments in &lt;code&gt;add_turbo_fish&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11238&quot;&gt;&lt;code&gt;#11238&lt;/code&gt;&lt;/a&gt; shrink the span of errors from attribute macros and derives.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11187&quot;&gt;&lt;code&gt;#11187&lt;/code&gt;&lt;/a&gt; rename and use the 1.55 proc macro ABI for 1.54.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11115&quot;&gt;&lt;code&gt;#11115&lt;/code&gt;&lt;/a&gt; refactor: avoid separate traversal in &lt;code&gt;Replace filter_map().next() with find_map()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11157&quot;&gt;&lt;code&gt;#11157&lt;/code&gt;&lt;/a&gt; remove &lt;code&gt;SemanticScope::speculative_resolve_as_mac&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11189&quot;&gt;&lt;code&gt;#11189&lt;/code&gt;&lt;/a&gt; remove lossy &lt;code&gt;Definition::{from_token,from_node}&lt;/code&gt; methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11216&quot;&gt;&lt;code&gt;#11216&lt;/code&gt;&lt;/a&gt; support registered tools and attributes in ide layer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11225&quot;&gt;&lt;code&gt;#11225&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11230&quot;&gt;&lt;code&gt;#11230&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11237&quot;&gt;&lt;code&gt;#11237&lt;/code&gt;&lt;/a&gt; clean up doc and attribute handling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11232&quot;&gt;&lt;code&gt;#11232&lt;/code&gt;&lt;/a&gt; filter out macro calls by file id in when building &lt;code&gt;DynMap&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11235&quot;&gt;&lt;code&gt;#11235&lt;/code&gt;&lt;/a&gt; record attribute calls on assoc items in &lt;code&gt;TraitData&lt;/code&gt; and &lt;code&gt;ImplData&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11236&quot;&gt;&lt;code&gt;#11236&lt;/code&gt;&lt;/a&gt; avoid &lt;code&gt;InFile&lt;/code&gt; wrapping of &lt;code&gt;DynMap&lt;/code&gt; keys.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #110</title>
        <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2022/01/03/changelog-110.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2022/01/03/changelog-110.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/8e9ccbf97a70259b6c6576e8fd7d77d28238737e&quot;&gt;&lt;code&gt;8e9ccbf&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2022-01-03&quot;&gt;&lt;code&gt;2022-01-03&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Become a sponsor:&lt;/strong&gt; On &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;OpenCollective&lt;/a&gt; or
&lt;a href=&quot;https://github.com/sponsors/rust-analyzer&quot;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11151&quot;&gt;&lt;code&gt;#11151&lt;/code&gt;&lt;/a&gt; correctly fall back to &lt;code&gt;notify&lt;/code&gt; if the client-side file watching is not supported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11173&quot;&gt;&lt;code&gt;#11173&lt;/code&gt;&lt;/a&gt; allow partially resolved types in &lt;code&gt;Add explicit type&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11136&quot;&gt;&lt;code&gt;#11136&lt;/code&gt;&lt;/a&gt; (first contribution) use the right numbers of placeholders in &lt;code&gt;Add turbofish&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11088&quot;&gt;&lt;code&gt;#11088&lt;/code&gt;&lt;/a&gt; hide some trivial type hints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11158&quot;&gt;&lt;code&gt;#11158&lt;/code&gt;&lt;/a&gt; enable completions for &lt;code&gt;&amp;lt;_&amp;gt;::$0&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11171&quot;&gt;&lt;code&gt;#11171&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11175&quot;&gt;&lt;code&gt;#11175&lt;/code&gt;&lt;/a&gt; fix tool module classification.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11144&quot;&gt;&lt;code&gt;#11144&lt;/code&gt;&lt;/a&gt; fix server path on NixOS.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11131&quot;&gt;&lt;code&gt;#11131&lt;/code&gt;&lt;/a&gt; avoid speculation when completing macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11156&quot;&gt;&lt;code&gt;#11156&lt;/code&gt;&lt;/a&gt; record unresolved derive invocations in &lt;code&gt;hir&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11160&quot;&gt;&lt;code&gt;#11160&lt;/code&gt;&lt;/a&gt; use a basic &lt;code&gt;NonEmptyVec&lt;/code&gt; in &lt;code&gt;mbe::syntax_bridge&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11169&quot;&gt;&lt;code&gt;#11169&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11177&quot;&gt;&lt;code&gt;#11177&lt;/code&gt;&lt;/a&gt; handle macro calls better in highlighting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11134&quot;&gt;&lt;code&gt;#11134&lt;/code&gt;&lt;/a&gt; tighten up parser API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11141&quot;&gt;&lt;code&gt;#11141&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11152&quot;&gt;&lt;code&gt;#11152&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11153&quot;&gt;&lt;code&gt;#11153&lt;/code&gt;&lt;/a&gt; add tests for extra parser entry points.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11163&quot;&gt;&lt;code&gt;#11163&lt;/code&gt;&lt;/a&gt; add tests for top-level parser entry points.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11164&quot;&gt;&lt;code&gt;#11164&lt;/code&gt;&lt;/a&gt; more macro tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11165&quot;&gt;&lt;code&gt;#11165&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11167&quot;&gt;&lt;code&gt;#11167&lt;/code&gt;&lt;/a&gt; start enforcing invariants for top-level entry points.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11127&quot;&gt;&lt;code&gt;#11127&lt;/code&gt;&lt;/a&gt; set a timeout on the Octokit client.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>rust-analyzer in 2021</title>
        <pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//blog/2021/12/30/2021-recap.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//blog/2021/12/30/2021-recap.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In case this post piques your interest in contributing, consider checking out the &lt;a href=&quot;https://www.youtube.com/playlist?list=PLhb66M_x9UmrqXhQuIpWC5VgTdrGxMx3y&quot;&gt;Explaining rust-analyzer&lt;/a&gt; series on YouTube, the development docs &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev&quot;&gt;on GitHub&lt;/a&gt; or visit our &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer&quot;&gt;Zulip stream&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A lot has happened this year, so we want to take a brief look back at what we have achieved and what has yet to come.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, we did not manage to make rust-analyzer an official Rust project in 2021. But if all goes well this should change at the start of the coming year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We started the year out by trying out a different meeting style from our usual weekly syncs on &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/weekly.20sync-up&quot;&gt;Zulip&lt;/a&gt;. We now have six-weeks sprints, with a steering meeting between them, where the working group gets together and discusses what topics and issues to focus on next.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;proc-macros-and-attributes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#proc-macros-and-attributes&quot;&gt;&lt;/a&gt;(Proc-)Macros and Attributes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Probably one of the biggest improvements that landed this year was attribute
proc-macro support, implemented in &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/9128&quot;&gt;#9128&lt;/a&gt;. Attributes are used pervasively in some Rust codebases, usually expanding to enough new items (functions, &lt;code&gt;impl&lt;/code&gt; blocks etc.), and are essential in making the IDE work without significantly degrading the user experience. It took us roughly four months until we felt comfortable enough to enable their expansion &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10366&quot;&gt;by default&lt;/a&gt;, the main reason being the amount of code that had to be adapted to properly support them.
While this feature mostly works nowadays, there is still one big problem we are facing, that of how attributes can interact with incomplete code. This is described in issue &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/issues/11014&quot;&gt;#11014&lt;/a&gt; in more detail, but attribute proc macros fail to expand when they encounter syntax errors, as is often the case when the user is typing. Of course, function-like proc macros are affected in a similar way. We are still unsure about how to address this problem, so if you have any thoughts on the matter please comment on the linked issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attributes aside, a lot of improvements landed for proc-macros in general. We enabled &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8032&quot;&gt;proc-macros by default&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7412&quot;&gt;started loading proc-macros asynchronously&lt;/a&gt; and added support for &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/9550&quot;&gt;multiple proc-macro ABIs&lt;/a&gt;, a finicky feature. The Rust proc-macro ABI is deliberately outside of usual stability guarantees. It constantly evolves, but with every change it breaks our proc-macro server. To counteract this we now try to at least support ~3 ABI versions which nominally correspond to the latest stable, beta and nightly toolchains. In practice, we support much older versions: 1.47 and later, at this moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s worth pointing out that parts of our proc macro infrastructure are used by &lt;a href=&quot;https://intellij-rust.github.io&quot;&gt;IntelliJ Rust&lt;/a&gt;. It&amp;#8217;s a great example of cross-pollination of ideas between the two projects&amp;#8201;&amp;#8212;&amp;#8201;our &lt;code&gt;proc_macro_srv&lt;/code&gt; is based on a design originally implemented in IntelliJ Rust!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, declarative macros also saw some love. We switched to an &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7513&quot;&gt;NFA parser&lt;/a&gt; which brings us closer to how rustc handles them, added basic support for &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8212&quot;&gt;macro 2.0&lt;/a&gt; and &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8462&quot;&gt;type position macros&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;local-item-resolution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#local-item-resolution&quot;&gt;&lt;/a&gt;Local Item Resolution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust offers the ability to define new items inside of functions, consts and statics, making them effectively unnameable outside of these items. This idiom is seldom seen but is still useful at times. This is another piece of the language that is tricky to support, as an IDE wants to be lazy and only look at the big picture to understand a file&amp;#8217;s structure. Unfortunately, local items require us to look inside function bodies and the like.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As such, finding a compromise took some work:
&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7336&quot;&gt;#7336&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7359&quot;&gt;#7359&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7366&quot;&gt;#7366&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7375&quot;&gt;#7375&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7426&quot;&gt;#7426&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7431&quot;&gt;#7431&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7466&quot;&gt;#7466&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7480&quot;&gt;#7480&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7481&quot;&gt;#7481&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7482&quot;&gt;#7482&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7485&quot;&gt;#7485&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7518&quot;&gt;#7518&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7525&quot;&gt;#7525&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7541&quot;&gt;#7541&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7544&quot;&gt;#7544&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7554&quot;&gt;#7554&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7555&quot;&gt;#7555&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7557&quot;&gt;#7557&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7559&quot;&gt;#7559&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7561&quot;&gt;#7561&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7568&quot;&gt;#7568&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7575&quot;&gt;#7575&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7627&quot;&gt;#7627&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/9244&quot;&gt;#9244&lt;/a&gt;.
The final piece, enabling it all, landed in &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7614&quot;&gt;#7614&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;chalk-integration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#chalk-integration&quot;&gt;&lt;/a&gt;Chalk integration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We managed to switch our type representation to the one used by &lt;a href=&quot;https://github.com/rust-lang/chalk&quot;&gt;chalk&lt;/a&gt;, avoiding the need to convert between them every time we invoke the trait solver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This work was done over a bunch of different pull requests: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7804&quot;&gt;#7804&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7813&quot;&gt;#7813&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7814&quot;&gt;#7814&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7816&quot;&gt;#7816&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7823&quot;&gt;#7823&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7826&quot;&gt;#7826&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7833&quot;&gt;#7833&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7870&quot;&gt;#7870&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8016&quot;&gt;#8016&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7998&quot;&gt;#7998&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8001&quot;&gt;#8001&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8018&quot;&gt;#8018&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8038&quot;&gt;#8038&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8136&quot;&gt;#8136&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8190&quot;&gt;#8190&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8139&quot;&gt;#8139&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8309&quot;&gt;#8309&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8327&quot;&gt;#8327&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8856&quot;&gt;#8856&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8921&quot;&gt;#8921&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8938&quot;&gt;#8938&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8856&quot;&gt;#8856&lt;/a&gt;, and we were finally able to fully move over in &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8419&quot;&gt;#8419&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;const-generic-params&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#const-generic-params&quot;&gt;&lt;/a&gt;Const Generic Params&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We started working on basic const generics support, tracking issue &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/issues/8655&quot;&gt;#8655&lt;/a&gt;. This is one of the major pieces left for us to properly support, but also one of the more difficult ones. This problem becomes more and more apparent as libraries are switching over to using them. A notable example being &lt;code&gt;nalgebra&lt;/code&gt;, which rust-analyzer is completely confused by.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For an ideal experience we would need to evaluate expressions in const generic position like rustc does. Unlike rustc though, we are unable to use &lt;a href=&quot;https://github.com/rust-lang/miri/&quot;&gt;&lt;code&gt;miri&lt;/code&gt;&lt;/a&gt;. The reason for that is the fact that we do not share the internal data structures that the compiler and miri make use of, nor do we plan to do so in the near future. Because of this, we are required to build our own basic evaluator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This isn&amp;#8217;t the only problem we have. As it currently stands, the majority of rust-analyzer&amp;#8217;s type checking codebase doesn&amp;#8217;t even know about const generics (or lifetimes), and just assumes that only type parameters exist.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;mutable-immutable-syntax-trees&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mutable-immutable-syntax-trees&quot;&gt;&lt;/a&gt;Mutable Immutable Syntax Trees&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rowan&quot;&gt;Rowan&lt;/a&gt;, our concrete syntax tree crate, has been adjusted to allow creating mutable copies of the immutable syntax trees. For more in-depth information behind this, check out &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/issues/6857&quot;&gt;this issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To put it short, the assists like to take existing syntax in a file, modify it slightly, then paste back the result, changing only a few parts of the code. What most assists did before was to reconstruct the output syntax trees out of the original tree nodes, with the changes inserted or left out. This is unfortunately a tedious process depending on the type of syntax node that has to be edited. These mutable immutable trees now allow us to instead mutably clone a tree, modify it in-place and paste this modified tree back as is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This does not come without its own problems of course, with the main one being that iterating while mutating, which is now possible, will now panic or produce an incorrect tree.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-code-extension-and-server-downloads&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-code-extension-and-server-downloads&quot;&gt;&lt;/a&gt;The Code extension and server downloads&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The final releases of the year brought two important changes to the way the language server binary is acquired. Until now, the extension called the GitHub API to find a matching release, and downloaded the server from there. In addition, if you opted in to the nightly channel, every day the extension would search for an updated VSIX.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While this suited us well for a long time, it had some downsides:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;edge cases like MITM HTTPS proxies with untrusted certificates never worked&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;not being able to replace running executable on Windows (in case you had two running instances) has been a major source of complaints&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code checks for extension updates automatically, but the server was downloaded on activation. Many users had an unpleasant surprise when opening a Rust project without a working Internet connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub Actions has been increasingly unreliable lately causing the nightly builds to fail very often. This broke the extension for users running the nightlies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the download and update code brought a lot of non-essential complexity and even exposed a Node.js bug&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the required client-side dependencies increased the surface for supply chain attacks&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So when the Marketplace added support for platform-specific and pre-release extensions, we starting using it with &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11053&quot;&gt;#11053&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11071&quot;&gt;#11071&lt;/a&gt; and &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11071&quot;&gt;#11106&lt;/a&gt;. On a related note, we also &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10903&quot;&gt;replaced&lt;/a&gt; the client-side unit testing framework with a bit of custom code, dropping our transitive dependencies by the dozens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, the update changes exposed some issues with both the Code Marketplace and Open VSX (used by open-source builds of Code). This is discussed in detail &lt;a href=&quot;https://rust-analyzer.github.io/thisweek/2021/12/27/changelog-109.html#known-issues&quot;&gt;here&lt;/a&gt;, the gist being that you currently need to take manual action when installing or updating the extension. The two issues have been reported upstream, so we hope they will be fixed soon.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;general-ide-experience-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#general-ide-experience-improvements&quot;&gt;&lt;/a&gt;General IDE Experience Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now support standalone Rust files (&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8955&quot;&gt;#8955&lt;/a&gt;), so just opening a single file should allow you to use most of rust-analyzer&amp;#8217;s functionality that is not reliant on cargo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also improved and added a bunch of smaller features, some noteworthy ones are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7297&quot;&gt;Flyimport Completions for Trait Associated Items&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10458&quot;&gt;Custom User Snippet Completions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7335&quot;&gt;Region Folding&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7799&quot;&gt;Related Test Peeking&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8054&quot;&gt;Move Item Command&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8801&quot;&gt;Crate Graph View&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8873&quot;&gt;Import Granularity Guessing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Highlighting &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/9375&quot;&gt;Function Exit and Yield Points&lt;/a&gt; and &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/9396&quot;&gt;Loop Break Points&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8774&quot;&gt;Respect &lt;code&gt;.cargo/config.toml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An impressive ~37 new assists have been implemented, some by the main contributors, but most by newcomers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7310&quot;&gt;Add Lifetime to Type&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7824&quot;&gt;Add Type Ascription&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10362&quot;&gt;Convert &lt;code&gt;a/mod.rs&lt;/code&gt; into &lt;code&gt;a.rs&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/9837&quot;&gt;Convert &lt;code&gt;bool::then&lt;/code&gt; to &lt;code&gt;if&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7741&quot;&gt;Convert &lt;code&gt;for&lt;/code&gt; Loop to &lt;code&gt;Iterator::for_each&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/9816&quot;&gt;Convert &lt;code&gt;if&lt;/code&gt; to &lt;code&gt;bool::then&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8295&quot;&gt;Convert &lt;code&gt;Into&lt;/code&gt; Impl to &lt;code&gt;From&lt;/code&gt; Impl&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7956&quot;&gt;Convert &lt;code&gt;Iterator::for_each&lt;/code&gt; to &lt;code&gt;for&lt;/code&gt; Loop&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7777&quot;&gt;Convert Between Line and Block Comments&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10211&quot;&gt;Convert File Module to Directory&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10998&quot;&gt;Convert Number Representation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8317&quot;&gt;Convert Tuple Struct to Named Struct&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/9855&quot;&gt;Destructure Pattern into Tuple Pattern&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7130&quot;&gt;Extract Assignment&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7535&quot;&gt;Extract Function&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/9939&quot;&gt;Extract module&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8210&quot;&gt;Extract Type Alias&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8037&quot;&gt;Generate &lt;code&gt;fn is_empty&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10459&quot;&gt;Generate Constant&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7800&quot;&gt;Generate Default Impl&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10539&quot;&gt;Generate Delegate Methods&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/8467&quot;&gt;Generate Deref Impl&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10951&quot;&gt;Generate Documentation Templates&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7562&quot;&gt;Generate Enum Match&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7677&quot;&gt;Generate Enum Match 2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7617&quot;&gt;Generate Getter and Setter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/9804&quot;&gt;Generate Method&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7131&quot;&gt;Inline Function&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10352&quot;&gt;Inline into Callers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10546&quot;&gt;Promote Local to Const&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10602&quot;&gt;Qualify method call&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10476&quot;&gt;Replace &lt;code&gt;?&lt;/code&gt; with &lt;code&gt;match&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10629&quot;&gt;Replace Turbofish with Explicit Type&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/6809&quot;&gt;Sort Impl Functions by Trait definition&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/9735&quot;&gt;Sort Members Lexicographically&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/7289&quot;&gt;Unmerge Use&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10417&quot;&gt;Unwrap &lt;code&gt;Result&lt;/code&gt; Return Type&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We made a bunch of progress this year, finishing up work on important functionality pieces as well as quality of life changes. But there is still a lot more to be done, as a quick look at the &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3AArchitecture&quot;&gt;issue tracker&lt;/a&gt; may tell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big thanks to everyone supporting the project, be it through donations, contributions or cheers. We wish you a fortunate next year 🎉.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #109</title>
        <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2021/12/27/changelog-109.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2021/12/27/changelog-109.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/68319187d63707fa36d7c215ed0e444e87d9652a&quot;&gt;&lt;code&gt;6831918&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2021-12-27&quot;&gt;&lt;code&gt;2021-12-27&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Become a sponsor:&lt;/strong&gt; On &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;OpenCollective&lt;/a&gt; or
&lt;a href=&quot;https://github.com/sponsors/rust-analyzer&quot;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;known-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#known-issues&quot;&gt;&lt;/a&gt;Known Issues&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are some recent known issues related to the VS Code extension and the update mechanism:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Since last week, users running VSCodium or another open-source build of Code might have issues opening projects. This is caused by a change to bundle the server binary with the extension, instead of downloading it on the first load. Unfortunately, Open VSX, which is the marketplace used by VSCodium and other forks &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/issues/11080&quot;&gt;does not&lt;/a&gt; support platform-specific, sometimes serving users binaries for the wrong platform. The workaround is to manually download the VSIX for your platform from GitHub releases, or to install the non-free version of Code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since last Wednesday, if you install the rust-analyzer from Code, you might get an older version of the extension (&lt;code&gt;0.2.853&lt;/code&gt;, from two weeks ago). This is caused by us publishing the nightlies as pre-release version to the Marketplace, which was done to avoid having to download VSIX updates from GitHub for users on the nightly channel. Unfortunately, after publishing the first pre-release version, the Marketplace &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/issues/11098&quot;&gt;stopped showing&lt;/a&gt; the latest stable version (&lt;code&gt;0.2.867&lt;/code&gt;, from last week). The workaround is to manually download the VSIX from GitHub releases, or to switch to the pre-release version, then back to the stable one which appears to fix it, probably by triggering another Code bug.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VS Code allows installing VSIX files that don&amp;#8217;t match your platform. Please don&amp;#8217;t do that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you&amp;#8217;re running a 32-bit version of VS Code on a 64-bit Windows system, please install the 64-bit version of Code instead. This configuration used to work thanks to a workaround in the extension (it downloaded the 64-bit binary), but it&amp;#8217;s no longer supported. If you are actually running 32-bit Windows, you don&amp;#8217;t need to do anything different since that&amp;#8217;s not a supported platform anyway.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s not yet known how updating between stable versions works.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re not running one of the supported platforms, GitHub releases have a VSIX without an included server, but you&amp;#8217;ll need to compile the server or obtain it by using &lt;code&gt;rustup&lt;/code&gt;, just like before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any problems, please check the version you&amp;#8217;re running against the one published on &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer&quot;&gt;the Marketplace&lt;/a&gt;, check if you&amp;#8217;ve set &lt;code&gt;rust-analyzer.server.path&lt;/code&gt; (it&amp;#8217;s not required on the supported platforms), and maybe file an issue if it still doesn&amp;#8217;t work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11071&quot;&gt;&lt;code&gt;#11071&lt;/code&gt;&lt;/a&gt; build and publish pre-release Code extension versions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11106&quot;&gt;&lt;code&gt;#11106&lt;/code&gt;&lt;/a&gt; remove network updates from the Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10933&quot;&gt;&lt;code&gt;#10933&lt;/code&gt;&lt;/a&gt; show values of constants in hover.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11122&quot;&gt;&lt;code&gt;#11122&lt;/code&gt;&lt;/a&gt; remove note about alpha status Code extension description.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11062&quot;&gt;&lt;code&gt;#11062&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t say &quot;a reference to&quot; &lt;code&gt;Copy&lt;/code&gt; types in the docs created by &lt;code&gt;Generate getter&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11069&quot;&gt;&lt;code&gt;#11069&lt;/code&gt;&lt;/a&gt; partially fix &lt;code&gt;ide_db::search&lt;/code&gt; for crate roots.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11073&quot;&gt;&lt;code&gt;#11073&lt;/code&gt;&lt;/a&gt; fix Windows not finding the PDB file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11074&quot;&gt;&lt;code&gt;#11074&lt;/code&gt;&lt;/a&gt; bump default &lt;code&gt;CHALK_SOLVER_MAX_SIZE&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11083&quot;&gt;&lt;code&gt;#11083&lt;/code&gt;&lt;/a&gt; fix &lt;code&gt;Inline local&lt;/code&gt; assist not working in &lt;code&gt;let&lt;/code&gt; statement initializer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11093&quot;&gt;&lt;code&gt;#11093&lt;/code&gt;&lt;/a&gt; complete &lt;code&gt;std::mem::drop&lt;/code&gt; instead of &lt;code&gt;Drop::drop&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/10484&quot;&gt;&lt;code&gt;#10484&lt;/code&gt;&lt;/a&gt; update match checking algorithm to match &lt;code&gt;rustc&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11065&quot;&gt;&lt;code&gt;#11065&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t kick off inference in &lt;code&gt;Semantics::descend_into_macros_impl&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11082&quot;&gt;&lt;code&gt;#11082&lt;/code&gt;&lt;/a&gt; do less work in &lt;code&gt;hir::Semantics&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11067&quot;&gt;&lt;code&gt;#11067&lt;/code&gt;&lt;/a&gt; store function parameter names in &lt;code&gt;ItemTree&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11086&quot;&gt;&lt;code&gt;#11086&lt;/code&gt;&lt;/a&gt; simplify completion rendering.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11089&quot;&gt;&lt;code&gt;#11089&lt;/code&gt;&lt;/a&gt; render more completions from HIR instead of AST.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11090&quot;&gt;&lt;code&gt;#11090&lt;/code&gt;&lt;/a&gt; deduplicate lowering ctx hygiene field.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11092&quot;&gt;&lt;code&gt;#11092&lt;/code&gt;&lt;/a&gt; directly use the &lt;code&gt;self&lt;/code&gt; parameter in completions instead of searching for it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11095&quot;&gt;&lt;code&gt;#11095&lt;/code&gt;&lt;/a&gt; disable unstable APIs for nightly releases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11103&quot;&gt;&lt;code&gt;#11103&lt;/code&gt;&lt;/a&gt; improve GitHub release action.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11117&quot;&gt;&lt;code&gt;#11117&lt;/code&gt;&lt;/a&gt; replace &lt;code&gt;TreeSink&lt;/code&gt; with a data structure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11118&quot;&gt;&lt;code&gt;#11118&lt;/code&gt;&lt;/a&gt; move whitespace attachment logic to the parser crate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11120&quot;&gt;&lt;code&gt;#11120&lt;/code&gt;&lt;/a&gt; move parser tests to the &lt;code&gt;parser&lt;/code&gt; crate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/11028&quot;&gt;&lt;code&gt;#11028&lt;/code&gt;&lt;/a&gt; bump MSRV to 1.57.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
  </channel>
</rss>
